#!/usr/bin/env bash

################################################################################
#
# dotfiles: Automated dotfile setup and system configuration.
#
# TODO: opener about setting up dev environment.
#
# This script is used for keeping configuration files in $HOME in sync with the
# ones that are in this directory.
#
# TODO: document linking, system setup, git setup, backing up existing files.
#
################################################################################

set -e

# TODO: maybe delete this

RESET_COLOR="$(tput sgr 0)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
LIGHT_CYAN="$(tput bold)$(tput setaf 6)"
LIGHTGRAY=$(echo -en '\033[00;37m')
LRED=$(echo -en '\033[01;31m')
LGREEN=$(echo -en '\033[01;32m')
LYELLOW=$(echo -en '\033[01;33m')
LBLUE=$(echo -en '\033[01;34m')
LMAGENTA=$(echo -en '\033[01;35m')
LPURPLE=$(echo -en '\033[01;35m')
LCYAN=$(echo -en '\033[01;36m')
WHITE=$(echo -en '\033[01;37m')

DF_PROG_NAME="$(basename "$0")"
DEBUG=1

DF_STATUS_CMD='status'
DF_SYNC_CMD='sync'
DF_BACKUP_CMD='backup'

DF_BACKUP_PATH="$HOME/.dotfiles_backup"

DF_ERR_INVALID_ARG=200
DF_ERR_SYNC_INVALID_ARG=201
DF_ERR_BACKUP_INVALID_ARG=202
DF_ERR_STATUS_INVALID_ARG=203
DF_ERR_NO_MSG=204

function df_usage() {
  cat <<EOF
Usage: $DF_PROG_NAME [-dh]

Options:
	-h	Prints this message.

	-d	Enables debug mode.

Subcommands:
	$DF_STATUS_CMD	Displays status about

	$DF_SYNC_CMD	Syncs, backing up existing configuration if necessary.

	$DF_BACKUP_CMD	list
EOF
}

function df_echo() {
  echo -e "$*"
}

function df_debug() {
  if [ $DEBUG -eq 0 ]; then
    echo -e "${LIGHT_CYAN}[DEBUG]${RESET_COLOR} ${DF_PROG_NAME}: $*"
  fi
}

function df_error() {
  echo -e "${RED}${DF_PROG_NAME}: ${*}${RESET_COLOR}" 1>&2
}

function df_date_rfc() {
  date -u +%Y-%m-%dT%H-%M-%SZ
}

################################################################################
#
# df_status: Subcommand for 
#
# Env:
#   DOTFILE_PATH (required directory)
#
# See df_status_usage for documentation on options handled.
#
################################################################################
function df_status() {
  # Parse options and shift to real arguments
  local OPTIND
  while getopts 'dhf' o; do
    case "$o" in
      d)
        DEBUG=0
        ;;
      h)
        exit $DF_ERR_STATUS_INVALID_ARG
        ;;
      *)
        df_error "Unrecognized option: $o."
        exit $DF_ERR_STATUS_INVALID_ARG
        ;;
    esac
  done
  shift $((OPTIND-1))

  df_echo "Dotfiles directory: ${MAGENTA}$DOTFILE_PATH${RESET_COLOR}"
  local dotfile_root="${DOTFILE_PATH%/}/"
  local -a synced=()
  local -a missing=()
  local -a conflict=()
  while read -r dotfile; do # TODO: verify if this works with paths with spaces
    local dotfile_relpath="${dotfile#$dotfile_root}"
    local dotfile_home="$HOME/$dotfile_relpath"
    df_debug "Comparing $dotfile to $dotfile_home..."
    if [ ! -e "$dotfile_home" ] && [ ! -h "$dotfile_home" ]; then
      df_debug "Adding $dotfile_relpath to missing array..."
      missing+=("$dotfile_relpath")
    elif [ "$(realpath "$dotfile_home" 2>/dev/null)" == "$(realpath "$dotfile")" ]; then
      # TODO: remove dependencies on realpath
      df_debug "Adding $dotfile_relpath to synced array..."
      synced+=("$dotfile_relpath")
    else
      df_debug "Adding $dotfile_relpath to conflict array..."
      conflict+=("$dotfile_relpath")
    fi
  done <<< "$(find "$DOTFILE_PATH" ! -type d)" # ! -type d to include symlinks

  local df_status

  df_debug "Printing out dotfiles in the synced list..."
  if [ ${#synced[@]} -gt 0 ]; then
    df_echo "Synced:"
    for dotfile_relpath in "${synced[@]}"; do
      df_echo "  ${GREEN}${dotfile_relpath}${RESET_COLOR}"
    done
    df_status=synced
    df_echo
  fi

  df_debug "Printing out dotfiles in the missing list..."
  if [ ${#missing[@]} -gt 0 ]; then
    df_echo "Missing:"
    for dotfile_relpath in "${missing[@]}"; do
      df_echo "  ${YELLOW}${dotfile_relpath}${RESET_COLOR}"
    done
    df_status=missing
    df_echo
  fi

  df_debug "Printing out dotfiles in the conflict list..."
  if [ ${#conflict[@]} -gt 0 ]; then
    df_echo "Conflicts:"
    for dotfile_relpath in "${conflict[@]}"; do
      df_echo "  ${RED}${dotfile_relpath}${RESET_COLOR}"
    done
    df_status=conflict
    df_echo
  fi

  df_debug "Printing out information on how to resolve issues..."
  case $df_status in
    synced)
      df_echo 'Dotfiles are fully synced.'
      ;;
    missing)
      df_echo "Found missing dotfiles. Please run '$DF_PROG_NAME $DF_SYNC_CMD' to update."
      exit $DF_ERR_NO_MSG
      ;;
    conflict)
      df_echo "Found conflicting dotfiles. Please run '$DF_PROG_NAME $DF_SYNC_CMD' to update."
      exit $DF_ERR_NO_MSG
      ;;
  esac
}

function df_status_usage() {
  echo
}

################################################################################
#
# df_sync: Subcommand for syncing dotfiles to home directory.
#
# Env:
#   DOTFILE_PATH (required directory)
#
# See df_sync_usage for documentation on options handled.
#
################################################################################
function df_sync() {
  # Parse options and shift to real arguments
  local OPTIND
  while getopts 'dhf' o; do
    case "$o" in
      d)
        DEBUG=0
        ;;
      h)
        exit $DF_ERR_SYNC_INVALID_ARG
        ;;
      *)
        df_error "Unrecognized option: $o."
        exit $DF_ERR_SYNC_INVALID_ARG
        ;;
    esac
  done
  shift $((OPTIND-1))

  df_echo 'Syncing dotfiles...'

  local -r backup_dir="$DF_BACKUP_PATH/$(df_date_rfc)"

  # enforce exactly one trailing slash
  local dotfile_root="${DOTFILE_PATH%/}/"

  local dotfile
  while read -r dotfile; do
    [ -z "$dotfile" ] && continue

    local dotfile_relpath="${dotfile#$dotfile_root}"
    df_symlink_to_home "$dotfile_relpath" "$backup_dir"
    echo
  done <<< "$(find "$DOTFILE_PATH" ! -type d)"

  df_echo 'Finished syncing dotfiles!'
}

################################################################################
#
# df_symlink_to_home: Creates a symlink to a dotfile in the user's home dir.
#
# Env:
#   DEBUG (boolean)
#   HOME (directory)
#   DOTFILE_PATH (directory)
#   DF_BACKUP_PATH (directory)
#
# Arguments:
#   $1 - a relative path from DOTFILE_PATH that points to the dotfile.
#   $2 - an optional directory to backup existing dotfiles to.
#
# Returns an error if:
#   The dotfile already exists in HOME, but no backup directory was provided.
#
################################################################################
function df_symlink_to_home() {
  local -r dotfile_relpath="$1"
  local -r backup_root="$2"

  local -r src="$DOTFILE_PATH/$dotfile_relpath"
  local -r dst="$HOME/$dotfile_relpath"

  df_echo "Creating symlink ${BLUE}$dst${RESET_COLOR} -> ${CYAN}$src${RESET_COLOR}"
  df_debug "Using ${YELLOW}$dotfile_relpath${RESET_COLOR} as the relative path."
  if [ -e "$dst" ] || [ -h "$dst" ]; then
    # Only backup if a backup directory was provided
    if [ -z "$backup_root" ]; then
      df_error "Unable to symlink. File $dst already exists."
      return 1
    fi

    df_debug "${BLUE}$dst${RESET_COLOR} already exists. Backing up file before proceeding..."

    local -r backup_file="$backup_root/$dotfile_relpath"
    local -r backup_dir="$(dirname "$backup_file")"
    if [ ! -d "$backup_dir" ]; then
      df_debug "Backup directory DNE. Creating $backup_dir ..."
      mkdir -p "$backup_dir"
    fi
    df_echo "File already exists. Backing up ${BLUE}$dst${RESET_COLOR} -> ${GREEN}$backup_file${RESET_COLOR}"
    mv "$dst" "$backup_dir"
  fi

  # Check to make sure the parent directories for src exist before linking
  local -r dst_dir="$(dirname "$dst")"
  if [ ! -d "$dst_dir" ]; then
    df_debug "Directory $dst_dir DNE. Creating it..."
    mkdir -p "$dst_dir"
  fi
  ln -s "$src" "$dst"
}

function df_sync_usage() {
  cat <<EOF
Usage: $DF_PROG_NAME $DF_SYNC_CMD [-dhf]

Options:
	-h	Prints this message.

	-d	Enables debug mode.

	-f	Overwrite existing dotfiles without making a backup.
EOF
}


################################################################################
#
# df_backup: Subcommand for managing dotfile backups.
#
# Env:
#   DOTFILE_PATH (required directory)
#
# See df_backup_usage for documentation on options handled.
#
################################################################################
function df_backup() {
  # Parse options and shift to real arguments
  local OPTIND
  local cmd
  local backup
  while getopts 'dD:hlr:' o; do
    case "$o" in
      d)
        DEBUG=0
        ;;
      r)
        cmd=$o
        backup=$(awk '{$1=$1};1' <<< "$OPTARG")
        ;;
      D)
        cmd=$o
        backup=$(awk '{$1=$1};1' <<< "$OPTARG")
        ;;
      l)
        cmd=$o
        ;;
      h)
        exit $DF_ERR_BACKUP_INVALID_ARG
        ;;
      *)
        df_error "Unrecognized option: $o."
        exit $DF_ERR_BACKUP_INVALID_ARG
        ;;
    esac
  done
  shift $((OPTIND-1))

  if [ "$cmd" == 'l' ]; then
    df_backup_list
  elif [ "$cmd" == 'D' ] || [ "$cmd" == 'r' ]; then
    if [ -z "$backup" ]; then
      df_error "$DF_BACKUP_CMD -$cmd requires an argument."
      exit $DF_ERR_BACKUP_INVALID_ARG
    fi

    local backup_abspath="$DF_BACKUP_PATH/$backup"
    df_debug "Attempting to remove backup at $backup_abspath..."
    if ! df_backup_list | grep -wq "$backup"; then
      df_debug "Unable to find the '$backup' in the backup list."
      df_error "Backup '$backup' not found."
      exit $DF_ERR_NO_MSG
    fi

    rm -rf "$backup_abspath"
    df_debug "Removed $backup_abspath."
  else
    exit $DF_ERR_BACKUP_INVALID_ARG
  fi
}

function df_backup_list() {
  find "$DF_BACKUP_PATH" ! -path "$DF_BACKUP_PATH" -type d -maxdepth 1 | xargs basename | sort
}

function df_backup_usage() {
  cat <<EOF
Usage: $DF_PROG_NAME $DF_BACKUP_CMD [-dh] -l
       $DF_PROG_NAME $DF_BACKUP_CMD [-dh] -D BACKUP_TIMESTAMP
       $DF_PROG_NAME $DF_BACKUP_CMD [-dh] -r BACKUP_TIMESTAMP

Provides funcationality for managing dotfile backups.

Options:
	-h	Prints this message.

	-d	Enables debug mode.

	-l	Lists all the backups.

	-D	Delete a specific backup.

	-r	Restore a backup, backing up the current dotfiles first.
EOF
}

################################################################################
#
# main: Main entry point for executable.
#
# Processes the command line arguments and delegates to the appropriate
# subcommand.
#
# Env:
#   DOTFILE_PATH (required directory)
#
# See df_usage for documentation on all the different subcommands.
#
################################################################################
function main() {
  # Invariants
  if [ -z "$DOTFILE_PATH" ]; then
    df_error "${DF_PROG_NAME}: DOTFILE_PATH is not set."
    exit $DF_ERR_INVALID_ARG
  elif [ ! -d "$DOTFILE_PATH" ]; then
    df_error "${DF_PROG_NAME}: DOTFILE_PATH is not a directory."
    exit $DF_ERR_INVALID_ARG
  elif [ "$#" -eq 0 ]; then
    exit $DF_ERR_INVALID_ARG
  fi

  # Parse options and shift to real arguments
  local OPTIND o
  while getopts 'dh' o; do
    case "$o" in
      d)
        DEBUG=0
        ;;
      h)
        exit $DF_ERR_INVALID_ARG
        ;;
      *)
        df_error "Unrecognized option: $o."
        exit $DF_ERR_INVALID_ARG
        ;;
    esac
  done
  shift $((OPTIND-1))

  local subcommand="$1"
  shift
  case "$subcommand" in
    $DF_STATUS_CMD)
      df_status "$*"
      ;;
    $DF_SYNC_CMD)
      df_sync "$*"
      ;;
    $DF_BACKUP_CMD)
      df_backup "$*"
      ;;
    *)
      df_error "Unrecognized command: $subcommand."
      exit $DF_ERR_INVALID_ARG
      ;;
  esac
}

function handle_error() {
  local rv="$?"
  local line_number=$1
  case $rv in
    0)
      exit 0
      ;;
    $DF_ERR_SYNC_INVALID_ARG)
      df_sync_usage
      exit 1
      ;;
    $DF_ERR_STATUS_INVALID_ARG)
      df_status_usage
      exit 1
      ;;
    $DF_ERR_BACKUP_INVALID_ARG)
      df_backup_usage
      exit 1
      ;;
    $DF_ERR_INVALID_ARG)
      df_usage
      exit 1
      ;;
    $DF_ERR_NO_MSG)
      exit 1
      ;;
    *)
      df_error "$line_number: Unknown Error"
      exit $rv
      ;;
  esac
}
trap 'handle_error $LINENO $?' EXIT

main "$@"
